-- Rayfield Setup
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
	Name = "MM2 the script is still under testing",
	Icon = 0,
	LoadingTitle = "Loading...",
	LoadingSubtitle = "by darker9899",
	ShowText = "Rayfield",
	Theme = "Default",
	ToggleUIKeybind = "K",
	DisableRayfieldPrompts = false,
	DisableBuildWarnings = false,
	ConfigurationSaving = {
		Enabled = true,
		FolderName = nil,
		FileName = "Big Hub"
	},
	Discord = {
		Enabled = false,
		Invite = "noinvitelink",
		RememberJoins = true
	},
	KeySystem = false,
	KeySettings = {
		Title = "Untitled",
		Subtitle = "Key System",
		Note = "No method of obtaining the key is provided",
		FileName = "Key",
		SaveKey = true,
		GrabKeyFromSite = false,
		Key = {"JKB"}
	}
})

-- Serviços
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer

-- ESP TAB
local TabESP = Window:CreateTab("Esp", 4483362458)
local ESP_Ativo = false

local function RemoverTodosHighlights()
	for _, player in pairs(Players:GetPlayers()) do
		if player.Character and player.Character:FindFirstChild("OutlineESP") then
			player.Character.OutlineESP:Destroy()
		end
	end
end

local function UpdateHighlight(player)
	if player.Character then
		local highlight = player.Character:FindFirstChild("OutlineESP")
		if not highlight then
			highlight = Instance.new("Highlight")
			highlight.Name = "OutlineESP"
			highlight.Adornee = player.Character
			highlight.FillTransparency = 1
			highlight.OutlineTransparency = 0
			highlight.Parent = player.Character
		end

		local tool = player.Character:FindFirstChildOfClass("Tool") or (player:FindFirstChild("Backpack") and player.Backpack:FindFirstChildOfClass("Tool"))
		if tool then
			local name = tool.Name:lower()
			if name:find("gun") then
				highlight.OutlineColor = Color3.fromRGB(0, 170, 255)
			elseif name:find("knife") then
				highlight.OutlineColor = Color3.fromRGB(255, 0, 0)
			else
				highlight.OutlineColor = Color3.fromRGB(0, 255, 0)
			end
		else
			highlight.OutlineColor = Color3.fromRGB(0, 255, 0)
		end
	end
end

TabESP:CreateToggle({
	Name = "Outline ESP",
	CurrentValue = false,
	Flag = "ToggleESP",
	Callback = function(Value)
		ESP_Ativo = Value
		if not ESP_Ativo then RemoverTodosHighlights() end
	end,
})

task.spawn(function()
	while true do
		if ESP_Ativo then
			for _, player in pairs(Players:GetPlayers()) do
				if player ~= LocalPlayer then
					UpdateHighlight(player)
				end
			end
		end
		task.wait(0.1)
	end
end)

Players.PlayerAdded:Connect(function(player)
	player.CharacterAdded:Connect(function()
		task.wait(1)
		if ESP_Ativo then UpdateHighlight(player) end
	end)
end)

for _, player in pairs(Players:GetPlayers()) do
	if player ~= LocalPlayer then
		player.CharacterAdded:Connect(function()
			task.wait(1)
			if ESP_Ativo then UpdateHighlight(player) end
		end)
	end
end

-- MOVEMENT TAB
local TabMovement = Window:CreateTab("Movement", 4483362458)
local GlitchSpeed = 33
local NormalSpeed = 16
local ToggleEnabled = false
local IsJumping = false

local function SetSpeed(speed)
	local char = LocalPlayer.Character
	if char and char:FindFirstChildOfClass("Humanoid") then
		char:FindFirstChildOfClass("Humanoid").WalkSpeed = speed
	end
end

local function SetupHumanoid(humanoid)
	if not humanoid then return end
	humanoid.StateChanged:Connect(function(_, newState)
		if not ToggleEnabled then return end
		if newState == Enum.HumanoidStateType.Jumping or newState == Enum.HumanoidStateType.Freefall then
			IsJumping = true
		elseif newState == Enum.HumanoidStateType.Landed or newState == Enum.HumanoidStateType.Running then
			IsJumping = false
			SetSpeed(NormalSpeed)
		end
	end)
end

LocalPlayer.CharacterAdded:Connect(function(char)
	local humanoid = char:WaitForChild("Humanoid", 5)
	SetupHumanoid(humanoid)
	SetSpeed(NormalSpeed)
end)

if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
	SetupHumanoid(LocalPlayer.Character:FindFirstChild("Humanoid"))
	SetSpeed(NormalSpeed)
end

RunService.Heartbeat:Connect(function()
	if not ToggleEnabled then return end
	local char = LocalPlayer.Character
	if char and char:FindFirstChildOfClass("Humanoid") and IsJumping then
		local moving = char.Humanoid.MoveDirection.Magnitude > 0
		if moving then
			SetSpeed(GlitchSpeed)
		end
	end
end)

TabMovement:CreateToggle({
	Name = "Glitch Speed (Mobile)",
	CurrentValue = false,
	Flag = "GlitchSpeedToggle",
	Callback = function(Value)
		ToggleEnabled = Value
		SetSpeed(NormalSpeed)
	end,
})

-- SHERIFF TAB
local TabSheriff = Window:CreateTab("Sheriff", 4483362458)
local autoShootEnabled = true
local shootMode = "Curve"

TabSheriff:CreateToggle({
	Name = "Auto Shoot",
	CurrentValue = true,
	Flag = "AutoShootToggle",
	Callback = function(Value)
		autoShootEnabled = Value
	end,
})

TabSheriff:CreateDropdown({
	Name = "Choose Shoot Mode",
	Options = {"Curve", "Static", "Instantly"},
	CurrentOption = "Curve",
	Flag = "ShootModeDropdown",
	Callback = function(Option)
		shootMode = Option
	end,
})

-- Shoot Button GUI
local gui = Instance.new("ScreenGui", LocalPlayer:WaitForChild("PlayerGui"))
gui.Name = "ShootGui"
gui.ResetOnSpawn = false

local button = Instance.new("TextButton", gui)
button.Size = UDim2.new(0, 100, 0, 100)
button.Position = UDim2.new(0.5, -60, 0.8, 0)
button.BackgroundColor3 = Color3.fromRGB(180, 40, 40)
button.TextColor3 = Color3.new(1, 1, 1)
button.Font = Enum.Font.SourceSansBold
button.TextSize = 14
button.Text = "SHOOT"

-- Drag
local dragging, dragStart, startPos, dragInput
button.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		dragging = true
		dragStart = input.Position
		startPos = button.Position
		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				dragging = false
			end
		end)
	end
end)

button.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
		dragInput = input
	end
end)

UserInputService.InputChanged:Connect(function(input)
	if input == dragInput and dragging then
		local delta = input.Position - dragStart
		button.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end
end)

local function getPingTime() return 0.125 end

local function shoot()
	TweenService:Create(button, TweenInfo.new(0.1), {Size = UDim2.new(0, 100, 0, 90)}):Play()
	task.wait(0.1)
	TweenService:Create(button, TweenInfo.new(0.1), {Size = UDim2.new(0, 100, 0, 100)}):Play()

	local char = LocalPlayer.Character
	local backpack = LocalPlayer:FindFirstChild("Backpack")
	local gun = backpack and backpack:FindFirstChild("Gun") or char and char:FindFirstChild("Gun")
	if not gun then return end

	char:FindFirstChild("Humanoid"):EquipTool(gun)
	task.wait(0.1)

	for _, player in pairs(Players:GetPlayers()) do
		if player ~= LocalPlayer and player.Character then
			local hasKnife = player.Character:FindFirstChild("Knife") or (player.Backpack and player.Backpack:FindFirstChild("Knife"))
			if hasKnife then
				local root = player.Character:FindFirstChild("HumanoidRootPart")
				if not root then continue end

				local pos = root.Position
				local vel = root.Velocity
				local predicted = pos

				if shootMode == "Curve" then
					predicted = pos + vel * getPingTime()
				elseif shootMode == "Static" then
					predicted = pos
				elseif shootMode == "Instantly" then
					predicted = pos
					char:FindFirstChild("Humanoid"):EquipTool(gun)
				end

				pcall(function()
					local gunRemote = workspace:WaitForChild(LocalPlayer.Name):WaitForChild("Gun")
						:WaitForChild("KnifeLocal"):WaitForChild("CreateBeam"):WaitForChild("RemoteFunction")
					gunRemote:InvokeServer(1, predicted, "AH2")
				end)
				break
			end
		end
	end
end

button.MouseButton1Click:Connect(shoot)

task.spawn(function()
	while true do
		if autoShootEnabled then
			pcall(shoot)
			task.wait(0.5)
		else
			task.wait(1)
		end
	end
end)

-- AUTO TAB
local TabAuto = Window:CreateTab("Auto", 4483362458)

local autofarmEnabled = false
local walkSpeed = 30
local safeY = 5
local coinCount = 0

local maps = {
	"ResearchFacility", "Factory", "Millbase", "Workplace", "Hotel", "Hotel 2", "House 2", "Mansion 2", "Office 3", "Bank 2", "Bio Lab"
}

TabAuto:CreateToggle({
	Name = "Auto Farm Coins",
	CurrentValue = false,
	Flag = "AutoFarmCoins",
	Callback = function(Value)
		autofarmEnabled = Value
	end,
})

-- Funções auxiliares
local function getCurrentMap()
	for _, name in ipairs(maps) do
		local map = Workspace:FindFirstChild(name)
		if map and map:FindFirstChild("CoinContainer") then
			return map
		end
	end
	return nil
end

local function getAllCoins(map)
	local coins = {}
	local container = map:FindFirstChild("CoinContainer")
	if container then
		for _, obj in pairs(container:GetDescendants()) do
			if obj:IsA("BasePart") and obj.Name == "MainCoin" then
				table.insert(coins, obj)
			end
		end
	end
	return coins
end

local function walkTo(position)
	local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
	if not hrp then return end

	local distance = (position - hrp.Position).Magnitude
	local direction = (position - hrp.Position).Unit
	local endTime = tick() + (distance / walkSpeed)

	while tick() < endTime and autofarmEnabled do
		if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then break end
		LocalPlayer.Character.HumanoidRootPart.Velocity = direction * walkSpeed
		RunService.RenderStepped:Wait()
	end

	LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.zero
end

local function teleportToSafeSpot(map)
	local root = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
	if not root then return end
	local part = map:FindFirstChild("Floor") or map:FindFirstChildWhichIsA("BasePart")
	if part then
		root.CFrame = part.CFrame + Vector3.new(0, 10, 0)
	else
		root.CFrame = CFrame.new(0, 10, 0)
	end
end

-- Noclip constante
RunService.Stepped:Connect(function()
	if autofarmEnabled and LocalPlayer.Character then
		for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
			if part:IsA("BasePart") then
				part.CanCollide = false
			end
		end
	end
end)

-- Loop principal
task.spawn(function()
	while true do
		if autofarmEnabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
			local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
			if humanoid and humanoid.Health <= 0 then
				repeat task.wait(1) until LocalPlayer.Character:FindFirstChildOfClass("Humanoid") and LocalPlayer.Character:FindFirstChildOfClass("Humanoid").Health > 0
				task.wait(2)
			end

			local map = getCurrentMap()
			if map then
				local hrp = LocalPlayer.Character.HumanoidRootPart

				if hrp.Position.Y < safeY then
					teleportToSafeSpot(map)
					task.wait(1)
				end

				local coins = getAllCoins(map)
				table.sort(coins, function(a, b)
					return (a.Position - hrp.Position).Magnitude < (b.Position - hrp.Position).Magnitude
				end)

				for _, coin in ipairs(coins) do
					if autofarmEnabled and coin and coin:IsDescendantOf(game) then
						pcall(function()
							walkTo(coin.Position + Vector3.new(0, 2.5, 0))
							task.wait(0.15)
							coinCount += 1
						end)
					end
				end

				if #coins == 0 then
					task.wait(1)
				end
			end
		end
		task.wait(0.3)
	end
end)

local AutoGetGun = { Enabled = false, CollectDistance = 5000 }

local function isMurderer()
	for _, t in pairs(LocalPlayer.Character:GetChildren()) do
		if t:IsA("Tool") and t.Name == "Knife" then return true end
	end
	return false
end

local function getNearestGun()
	local root = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
	if not root then return end

	local closest, dist = nil, AutoGetGun.CollectDistance
	for _, item in ipairs(Workspace:GetDescendants()) do
		if item.Name == "GunDrop" then
			local success, pos = pcall(function() return item:GetPivot().Position end)
			if success and (root.Position - pos).Magnitude < dist then
				closest = item
				dist = (root.Position - pos).Magnitude
			end
		end
	end
	return closest
end

local function autoGetGunLoop()
	while AutoGetGun.Enabled do
		if not isMurderer() then
			local gun = getNearestGun()
			local root = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
			if gun and gun:IsA("BasePart") and root then
				local original = root.CFrame
				root.CFrame = CFrame.new(gun.Position + Vector3.new(0, 2, 0))
				task.wait()
				root.CFrame = original
			end
		end
		task.wait(3)
	end
end

TabAuto:CreateToggle({
	Name = "Auto Get Gun",
	CurrentValue = false,
	Flag = "AutoGetGunToggle",
	Callback = function(Value)
		AutoGetGun.Enabled = Value
		if Value then task.spawn(autoGetGunLoop) end
	end,
})

-- MORE TAB
local TabMore = Window:CreateTab("More", 4483362458)
TabMore:CreateButton({
	Name = "invisible script",
	Callback = function()
		loadstring(game:HttpGet("https://pastebin.com/raw/3Rnd9rHf"))()
	end,
})
TabMore:CreateParagraph({Title = "nao clique duas vezes se nao o script vai bugar", Content = ""})
